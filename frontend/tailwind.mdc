---
description: Buenas prácticas de Tailwind CSS y componentes UI para aplicaciones web modernas
globs: **/*.css, **/*.tsx, **/*.jsx, tailwind.config.js, tailwind.config.ts
---

# Buenas prácticas de Tailwind CSS

## Configuración del proyecto

- **Tailwind v4**: usa sintaxis moderna (imports y `@theme`).
- **Tokens semánticos**: define tokens (`--color-*`, `--radius-*`, `--font-*`) alineados a Keychain.
- **Purge**: Tailwind v4 hace tree‑shaking automático; evita CSS global innecesario.
- **Plugins**: incluye solo lo requerido por el design system.
- **Breakpoints/spacing**: centraliza como tokens.
- **Paleta**: mapea escalas a tokens semánticos.

## Estilos de componentes

- **Utilities primero**; usa `@apply` solo para patrones repetidos.
- **Responsive**: mobile‑first con prefijos `sm/md/lg/xl/2xl`.
- **Modo oscuro**: por media query o `class`; prioriza tokens para colores.
- **Variantes**: usa `hover:`, `focus:`, `disabled:`, `data-*` explícitamente.
- **Consistencia**: variantes y tamaños deben seguir Keychain.

## Layout

- Usa utilidades de Flex y Grid; evita CSS personalizado salvo excepciones.
- Espaciado guiado por tokens.
- Container queries para layouts complejos cuando aporte valor.
- Usa los breakpoints del design system.
- Prefiere utilidades de padding/margin; evita clases ad‑hoc.
- Alineación con utilidades (`items-`, `justify-`, `content-`).

## Tipografía

- Tamaños y `leading` del design system.
- Pesos tipográficos consistentes.
- Fuentes vía `next/font`; expón mediante tokens `--font-*`.
- Alineación y decoraciones con utilidades.

## Colores

- Nombres semánticos (`--color-primary`, `--color-accent`, etc.).
- Contraste mínimo AA.
- Usa utilidades de opacidad; evita redefinir colores.
- Gradientes y hovers alineados a Keychain.

## Componentes

- Prefiere la librería del DS (Keychain). Usa shadcn/ui solo si está aprobado.
- Extiende componentes preservando variantes.
- Prefiere animaciones/transitions con utilidades; minimiza CSS a medida.
- Accesibilidad: roles/aria correctos y foco visible.

## Diseño responsivo

- Enfoque mobile‑first.
- Fuente única de breakpoints del DS.
- Container queries según necesidad.
- Tipografía/espaciado responsivo con utilidades.

## Performance

- Tree‑shaking de Tailwind v4.
- Minimiza CSS a medida.
- Code splitting por ruta con Next.
- Optimiza assets y fuentes (`next/font`).
- Monitorea el tamaño del bundle.

## Buenas prácticas

- Sigue las convenciones del DS.
- Documenta patrones en Storybook (si aplica).
- Tests visuales/E2E para estados y variantes.
- Accesibilidad: objetivo WCAG AA.
- Control de versiones: gestiona cambios del DS cuidadosamente.

## Configuración mínima (Tailwind v4 + Keychain)

```css
/* src/app/globals.css */
@import 'tailwindcss';

:root {
  --background: #ffffff;
  --foreground: #0a0a0a;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-primary: #0ea5e9;
  --color-accent: #22c55e;
  --radius-sm: 0.25rem;
  --radius-md: 0.5rem;
  --radius-lg: 0.75rem;
  --font-sans: var(--font-geist-sans);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
}
```

## TODO

- Alinear tokens y componentes de Tailwind con el design system Keychain de Habi.
- Integrar Figma Connect para sincronizar tokens y componentes de Keychain al código.
- Definir el mapeo entre tokens de diseño de Figma y variables CSS (`--color-*`, `--radius-*`, `--font-*`).
- Establecer el flujo de versionado y actualización (Figma → Keychain → código) y documentarlo aquí.
