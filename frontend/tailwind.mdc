---
description: Tailwind CSS and UI component best practices for modern web applications
globs: **/*.css, **/*.tsx, **/*.jsx, tailwind.config.js, tailwind.config.ts
---

# Tailwind CSS Best Practices

## Project Setup

- **Tailwind v4**: use modern syntax (imports and `@theme`).
- **Semantic tokens**: define tokens (`--color-*`, `--radius-*`, `--font-*`) aligned with Keychain.
- **Purge**: Tailwind v4 tree-shakes automatically; avoid unnecessary global CSS.
- **Plugins**: include only what the design system requires.
- **Breakpoints/spacing**: centralize as tokens.
- **Palette**: map scales to semantic tokens.

## Component Styling

- **Utilities first**; use `@apply` only for repeated patterns.
- **Responsive**: mobile‑first with `sm/md/lg/xl/2xl` prefixes.
- **Dark mode**: via media query or `class`; prefer tokens for colors.
- **Variants**: use `hover:`, `focus:`, `disabled:`, `data-*` explicitly.
- **Consistency**: variants and sizes must follow Keychain.

## Layout

- Use Flex and Grid utilities; avoid custom CSS except for edge cases.
- Spacing guided by tokens.
- Container queries for complex layouts when valuable.
- Use design-system breakpoints.
- Prefer utility padding/margins; avoid ad‑hoc classes.
- Alignment via utilities (`items-`, `justify-`, `content-`).

## Typography

- Sizes and `leading` from the design system.
- Consistent font weights.
- Fonts via `next/font`; expose through `--font-*` tokens.
- Alignment and decorations via utilities.

## Colors

- Semantic names (`--color-primary`, `--color-accent`, etc.).
- Contrast at least AA.
- Use opacity utilities; avoid redefining colors.
- Gradients and hovers aligned with Keychain.

## Components

- Prefer the DS library (Keychain). Use shadcn/ui only if approved.
- Extend components preserving variants.
- Prefer utility animations/transitions; minimize custom CSS.
- Accessibility: proper roles/aria and visible focus.

## Responsive Design

- Mobile‑first approach.
- Single source of breakpoints from the DS.
- Container queries as needed.
- Responsive typography/spacing via utilities.

## Performance

- Tailwind v4 tree‑shaking.
- Minimize custom CSS.
- Route‑level code splitting with Next.
- Optimize assets and fonts (`next/font`).
- Monitor bundle size.

## Best Practices

- Follow DS conventions.
- Document patterns in Storybook (if applicable).
- Visual/E2E tests for states and variants.
- Accessibility: target WCAG AA.
- Version control: manage DS changes carefully.

## Minimal setup (Tailwind v4 + Keychain)

```css
/* src/app/globals.css */
@import 'tailwindcss';

:root {
  --background: #ffffff;
  --foreground: #0a0a0a;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-primary: #0ea5e9;
  --color-accent: #22c55e;
  --radius-sm: 0.25rem;
  --radius-md: 0.5rem;
  --radius-lg: 0.75rem;
  --font-sans: var(--font-geist-sans);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
}
```

## TODO

- Align Tailwind tokens and components with Habi Keychain design system.
- Integrate Figma Connect to sync Keychain tokens and components into code.
- Define mapping between Figma design tokens and CSS variables (`--color-*`, `--radius-*`, `--font-*`).
- Establish versioning and update workflow (Figma → Keychain → codebase) and document it here.
